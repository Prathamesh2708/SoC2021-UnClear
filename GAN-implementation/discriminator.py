# -*- coding: utf-8 -*-
"""Discriminator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MACEYwh1BHz17o70WngoSACpCu_8nTk_
"""

import tensorflow as tf

def reduce(filters , size , apply_normalisation = True):
  result = tf.keras.Sequential()
  result.add(tf.keras.layers.Conv2D( filters , size , strides = 2 , padding  = 'same' , kernel_initializer= tf.random_normal_initializer(0 , 0.02) , use_bias = False))
  if apply_normalisation:
    result.add(tf.keras.layers.BatchNormalization())
  result.add(tf.keras.layers.LeakyReLU())
  return result

def build_Discriminator():
  input = tf.keras.Input((256,256,3),name = 'input-img')
  target = tf.keras.Input((256,256,3),name = 'target-img')
  layer0 = tf.keras.layers.concatenate([input , target])

  down = reduce(64 , 4 , False)(layer0)
  down1 = reduce(128 , 4)(down)
  down2 = reduce(256,4)(down1)

  zero_pad = tf.keras.layers.ZeroPadding2D()(down2)
  initializer = tf.random_normal_initializer(0 , 0.02)
  conv = tf.keras.layers.Conv2D(512, 4, strides=1,
                                kernel_initializer= initializer, use_bias=False)(zero_pad) 

  batchnorm = tf.keras.layers.BatchNormalization()(conv)

  leaky_relu = tf.keras.layers.LeakyReLU()(batchnorm)

  zero_pad1 = tf.keras.layers.ZeroPadding2D()(leaky_relu) 

  layern = tf.keras.layers.Conv2D(1, 4, strides=1, kernel_initializer=initializer)(zero_pad1)

  return tf.keras.Model(inputs = [input,target], outputs = layern)

